{
    "simple": {
        "syntax": {
            "types": {
                "foo()": "foo( bar )"
            },
            "properties": {
                "test": "<foo()>"
            }
        },
        "valid": [
            "foo(bar)"
        ],
        "invalid": [
            "",
            "foo",
            "foo()",
            "foo(baz)"
        ]
    },
    "should be case insensetive": {
        "syntax": {
            "types": {
                "foo()": "fooBar( baz )"
            },
            "properties": {
                "test": "<foo()>"
            }
        },
        "valid": [
            "fooBar(baz)",
            "foobar(baz)",
            "FOOBAR(baz)"
        ]
    },
    "two arguments": {
        "syntax": {
            "types": {
                "foo()": "foo( bar, baz )"
            },
            "properties": {
                "test": "<foo()>"
            }
        },
        "valid": [
            "foo(bar, baz)"
        ],
        "invalid": [
            "foo()",
            "foo(bar)",
            "foo(baz)",
            "foo(bar, qux)"
        ]
    },
    "two arguments with optional": {
        "syntax": {
            "types": {
                "foo()": "foo( bar, baz? )"
            },
            "properties": {
                "test": "<foo()>"
            }
        },
        "valid": [
            "foo(bar, baz)",
            "foo(bar)"
        ],
        "invalid": [
            "foo()",
            "foo(baz)",
            "foo(bar, qux)"
        ]
    },
    "three optional arguments": {
        "syntax": {
            "types": {
                "foo()": "foo( bar?, baz?, qux? )"
            },
            "properties": {
                "test": "<foo()>"
            }
        },
        "valid": [
            "foo(bar)",
            "foo(baz)",
            "foo(qux)",
            "foo(bar, baz)",
            "foo(bar, qux)",
            "foo(baz, qux)",
            "foo(bar, baz, qux)",
            "foo()"
        ],
        "invalid": [
            "foo(baz, bar)",
            "foo(something)"
        ]
    }
}
